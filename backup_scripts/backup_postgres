#!/usr/bin/env bash

### Create a PostgreSQL database backup
###
### Usage:
###     $ docker-compose -f <environment>.yml (exec |run --rm) backup_helper backup_postgres

set -o errexit
set -o pipefail
set -o nounset

working_dir="$(dirname "${0}")"
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Backing up as 'postgres' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
    exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGDATABASE="${POSTGRES_DB}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"

if [[ -n "$POSTGRES_DATABASES" ]]; then
    message_welcome "Backing up multiple databases: ${POSTGRES_DATABASES}"
    message_newline

    for database in ${POSTGRES_DATABASES}; do
        message_info "Backing up database '${database}'..."

        backup_filename="${BACKUP_FILE_PREFIX}_postgres_${database}_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"
        pg_dump ${database} | gzip >"${BACKUP_DIR}/${backup_filename}"

        message_info "Database '${database}' backed up to '${backup_filename}'"
        message_newline
    done

    message_success "All databases backed up and can be found in directory '${BACKUP_DIR}'."
else
    message_welcome "Backing up database '${POSTGRES_DB}'..."

    backup_filename="${BACKUP_FILE_PREFIX}_postgres_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"
    pg_dump | gzip >"${BACKUP_DIR}/${backup_filename}"

    message_success "Database '${POSTGRES_DB}' backed up to '${backup_filename}' in '${BACKUP_DIR}'."
fi
